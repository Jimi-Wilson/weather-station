networks:
  web_gateway:
    external: true
  internal:

services:
  weather_backend:
    build: ./backend
    container_name: weather_django_backend
    restart: always
    command: gunicorn weather_station.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend/static_volume_data:/app/static
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web_gateway
      - internal

  weather_frontend:
    build: ./frontend
    container_name: weather_react_frontend
    restart: always
    networks:
      - web_gateway

  db:
    image: postgres:15-alpine
    container_name: weather_postgres_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal

volumes:
  postgres_data:
